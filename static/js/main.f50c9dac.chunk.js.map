{"version":3,"sources":["Keypad.js","logo.svg","Result.js","App.js","serviceWorker.js","index.js"],"names":["Keypad","state","text","expression","prevAnswer","inEvaluation","buttonPressed","bind","evalExpression","numberPressed","chr","Number","e","target","innerText","this","setState","result","i","length","window","alert","toString","eval","Infinity","err","substring","className","class","id","onClick","resetPad","backSpace","Component","module","exports","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f50c9dac.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\n\n\nclass Keypad extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // text is for display\n            // expression is for calculation\n            text: \" \",\n            expression: \" \",\n            prevAnswer: [0],\n            inEvaluation: true,\n        }\n        this.buttonPressed = this.buttonPressed.bind(this);\n        this.evalExpression = this.evalExpression.bind(this);\n        this.numberPressed = this.numberPressed.bind(this);\n    }\n\n\n    numberPressed(chr) {\n        let num = Number(chr);\n        if (num%1===0) {\n            return true;\n        }\n        return false;\n    }\n\n    buttonPressed(e) {\n        //If the button presssed is x, then reassign it to * for eval\n        if (e.target.innerText==='X') {\n            if (this.state.inEvaluation===false) {\n                this.setState ({\n                    text: this.state.prevAnswer[0] + 'X',\n                    expression: this.state.prevAnswer[0] + '*',\n                    inEvaluation: true\n                })\n            }\n            else {\n                this.setState({\n                    text: this.state.text + 'X',\n                    expression: this.state.expression + '*',\n                    inEvaluation: true\n                })\n            }\n        }\n        \n        else {\n            //when we are in the middle of evaluation and a key is pressed\n            if (this.state.inEvaluation===true) {\n                this.setState({\n                    text: this.state.text + e.target.innerText,\n                    expression: this.state.expression + e.target.innerText,\n                    inEvaluation: true,\n                })\n            }\n    \n            //when something is evaluated and we press an operation (+,-,/)\n            else if (this.state.inEvaluation===false && this.numberPressed(e.target.innerText)===false) {\n                this.setState({\n                    text: this.state.prevAnswer[0] + e.target.innerText,\n                    expression: this.state.prevAnswer[0] + e.target.innerText,\n                    inEvaluation: true\n                })\n            }\n    \n            //when there are no active evaluations and a number is pressed, it should be reset\n            else if (this.state.inEvaluation===false && this.numberPressed(e.target.innerText)===true) {\n                this.setState({\n                    text: e.target.innerText,\n                    expression: e.target.innerText,\n                    inEvaluation: true, \n                    prevAnswer: [0],\n                })\n            }\n        }\n    }\n\n    evalExpression(e) {\n        let result = 0;\n        //handle invalid expressions\n        for (let i=0; i<this.state.expression.length; i++) {\n            if (this.state.expression[i]+this.state.expression[i+1] === \"//\") {\n                window.alert(\"Please Enter a Valid Expression\")\n                this.setState ({\n                    text: this.state.prevAnswer[0].toString(),\n                    expression: this.state.prevAnswer[0].toString(),\n                })\n                return;\n            }\n        }\n        \n        try {\n            result = eval(this.state.expression);\n\n            //handle division by 0\n            if (result===Infinity) {\n                window.alert(\"Do not Divide by 0 Please\")\n                this.setState ({\n                    text: this.state.prevAnswer[0].toString(),\n                    expression: this.state.prevAnswer[0].toString()\n                })\n            }\n            else {\n                this.setState ({\n                    text: result.toString(),\n                    prevAnswer: [result, ...this.state.prevAnswer],\n                    inEvaluation: false\n                })\n            }\n        }\n        catch(err) {\n            window.alert(\"Please Enter a Valid Expression\")\n            this.setState ({\n                text: this.state.prevAnswer[0].toString(),\n                expression: this.state.prevAnswer[0].toString(),\n            })\n        }\n    }\n\n    resetPad(e) {\n        this.setState ({\n            text: \" \",\n            expression: \" \",\n            prevAnswer: [0],\n            inEvaluation: true,\n        })\n    }\n\n    backSpace(e) {\n        if (this.state.inEvaluation === true){\n            this.setState ({\n                text: this.state.text.substring(0, this.state.text.length-1),\n                expression: this.state.expression.substring(0, this.state.expression.length-1)\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div class=\"pad\">\n                    <div id=\"result\">\n                        <p>Ans= {this.state.prevAnswer[0]}</p>\n                        <p>{this.state.text}</p>\n                    </div>\n                    <button className=\"operation\" onClick={this.buttonPressed}>(</button>\n                    <button className=\"operation\" onClick={this.buttonPressed}>)</button>\n                    <button className=\"operation\" onClick={this.resetPad.bind(this)}>AC</button>\n                    <button className=\"operation\" onClick={this.backSpace.bind(this)}>CE</button>\n                    <button onClick={this.buttonPressed}>7</button>\n                    <button onClick={this.buttonPressed}>8</button>\n                    <button onClick={this.buttonPressed}>9</button>\n                    <button className=\"operation\" onClick={this.buttonPressed}>/</button>\n                    <button onClick={this.buttonPressed}>4</button>\n                    <button onClick={this.buttonPressed}>5</button>\n                    <button onClick={this.buttonPressed}>6</button>\n                    <button className=\"operation\" onClick={this.buttonPressed}>X</button>\n                    <button onClick={this.buttonPressed}>1</button>\n                    <button onClick={this.buttonPressed}>2</button>\n                    <button onClick={this.buttonPressed}>3</button>\n                    <button className=\"operation\" onClick={this.buttonPressed}>-</button>\n                    <button onClick={this.buttonPressed}>0</button>\n                    <button onClick={this.buttonPressed}>.</button>\n                    <button id=\"equal\" onClick={this.evalExpression}>=</button>\n                    <button className=\"operation\" onClick={this.buttonPressed}>+</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Keypad;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport './App.css';\n\nclass Result extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            result: 0\n        }\n    }\n\n    render() {\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default Result;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Keypad from './Keypad'\nimport Result from './Result'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>React Calculator</h2>\n      </header>\n      <div id=\"keypad\">\n        <Keypad />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}